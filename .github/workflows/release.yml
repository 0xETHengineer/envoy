# SPDX-FileCopyrightText: 2022 Foundation Devices Inc.
#
# SPDX-License-Identifier: GPL-3.0-or-later

name: Release

on: workflow_dispatch

jobs:
  build-android:
    runs-on: ubuntu-latest

    steps:
      - uses: extractions/setup-just@v1

      - uses: actions/checkout@v2

      - name: Build APK and AAB
        env:
          KEY_JKS: ${{ secrets.KEY_JKS }}
          KEY_PASSWORD: ${{ secrets.ALIAS_PASSWORD }}
          ALIAS_PASSWORD: ${{ secrets.KEY_PASSWORD }}
        run: echo -n $KEY_JKS | base64 -di > android/key.jks && just docker-build-android-sign

      - uses: actions/upload-artifact@v2
        with:
          name: envoy-apk
          path: release/app-release.apk


      - uses: actions/upload-artifact@v2
        with:
          name: envoy-aab
          path: release/app-release.aab

  build-ios:
    needs: build-android
    runs-on: macos-latest

    steps:
      - uses: actions/checkout@v2

      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      - name: Install Apple certificate and provisioning profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/distribution.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode --output $PP_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

      - uses: actions/setup-java@v1
        with:
          java-version: '12.x'

      - uses: subosito/flutter-action@v1
        with:
          channel: 'stable'
          flutter-version: '2.10.5'

      - name: Install dependencies
        run: flutter pub get

      - name: Install automake
        run: brew install automake

      - name: Build Rust libs
        run: ./build_ffi_ios.sh

      - name: Build iOS App Store Package
        run: |
          flutter build ipa --release --export-options-plist=ios/ExportOptions.plist

      - uses: actions/upload-artifact@v2
        with:
          name: envoy-ipa
          path: build/ios/ipa/envoy.ipa

      - name: Upload app to App Store Connect
        env:
          APP_STORE_CONNECT_USERNAME: ${{ secrets.APP_STORE_CONNECT_USERNAME }}
          APP_STORE_CONNECT_PASSWORD: ${{ secrets.APP_STORE_CONNECT_PASSWORD }}
        run: |
          xcrun altool --upload-app -t ios -f build/ios/ipa/envoy.ipa -u "$APP_STORE_CONNECT_USERNAME" -p "$APP_STORE_CONNECT_PASSWORD"


// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

class NativeLibrary {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NativeLibrary(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NativeLibrary.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  ffi.Pointer<ffi.Char> wallet_last_error_message() {
    return _wallet_last_error_message();
  }

  late final _wallet_last_error_messagePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'wallet_last_error_message');
  late final _wallet_last_error_message = _wallet_last_error_messagePtr
      .asFunction<ffi.Pointer<ffi.Char> Function()>();

  ffi.Pointer<ffi.Int> wallet_init(
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Char> external_descriptor,
    ffi.Pointer<ffi.Char> internal_descriptor,
    ffi.Pointer<ffi.Char> data_dir,
    int network,
  ) {
    return _wallet_init(
      name,
      external_descriptor,
      internal_descriptor,
      data_dir,
      network,
    );
  }

  late final _wallet_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Int32)>>('wallet_init');
  late final _wallet_init = _wallet_initPtr.asFunction<
      ffi.Pointer<ffi.Int> Function(
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          int)>();

  void wallet_drop(
    ffi.Pointer<ffi.Int> wallet,
  ) {
    return _wallet_drop(
      wallet,
    );
  }

  late final _wallet_dropPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int>)>>(
          'wallet_drop');
  late final _wallet_drop =
      _wallet_dropPtr.asFunction<void Function(ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Char> wallet_get_address(
    ffi.Pointer<ffi.Int> wallet,
  ) {
    return _wallet_get_address(
      wallet,
    );
  }

  late final _wallet_get_addressPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Int>)>>('wallet_get_address');
  late final _wallet_get_address = _wallet_get_addressPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Int>)>();

  bool wallet_sync(
    ffi.Pointer<ffi.Int> wallet,
    ffi.Pointer<ffi.Char> electrum_address,
    int tor_port,
  ) {
    return _wallet_sync(
      wallet,
      electrum_address,
      tor_port,
    );
  }

  late final _wallet_syncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>,
              ffi.Int32)>>('wallet_sync');
  late final _wallet_sync = _wallet_syncPtr.asFunction<
      bool Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, int)>();

  int wallet_get_balance(
    ffi.Pointer<ffi.Int> wallet,
  ) {
    return _wallet_get_balance(
      wallet,
    );
  }

  late final _wallet_get_balancePtr =
      _lookup<ffi.NativeFunction<ffi.Uint64 Function(ffi.Pointer<ffi.Int>)>>(
          'wallet_get_balance');
  late final _wallet_get_balance =
      _wallet_get_balancePtr.asFunction<int Function(ffi.Pointer<ffi.Int>)>();

  double wallet_get_fee_rate(
    ffi.Pointer<ffi.Char> electrum_address,
    int tor_port,
    int target,
  ) {
    return _wallet_get_fee_rate(
      electrum_address,
      tor_port,
      target,
    );
  }

  late final _wallet_get_fee_ratePtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Char>, ffi.Int32,
              ffi.Uint16)>>('wallet_get_fee_rate');
  late final _wallet_get_fee_rate = _wallet_get_fee_ratePtr
      .asFunction<double Function(ffi.Pointer<ffi.Char>, int, int)>();

  ServerFeatures wallet_get_server_features(
    ffi.Pointer<ffi.Char> electrum_address,
    int tor_port,
  ) {
    return _wallet_get_server_features(
      electrum_address,
      tor_port,
    );
  }

  late final _wallet_get_server_featuresPtr = _lookup<
      ffi.NativeFunction<
          ServerFeatures Function(
              ffi.Pointer<ffi.Char>, ffi.Int32)>>('wallet_get_server_features');
  late final _wallet_get_server_features = _wallet_get_server_featuresPtr
      .asFunction<ServerFeatures Function(ffi.Pointer<ffi.Char>, int)>();

  TransactionList wallet_get_transactions(
    ffi.Pointer<ffi.Int> wallet,
  ) {
    return _wallet_get_transactions(
      wallet,
    );
  }

  late final _wallet_get_transactionsPtr = _lookup<
          ffi.NativeFunction<TransactionList Function(ffi.Pointer<ffi.Int>)>>(
      'wallet_get_transactions');
  late final _wallet_get_transactions = _wallet_get_transactionsPtr
      .asFunction<TransactionList Function(ffi.Pointer<ffi.Int>)>();

  Psbt wallet_create_psbt(
    ffi.Pointer<ffi.Int> wallet,
    ffi.Pointer<ffi.Char> send_to,
    int amount,
    double fee_rate,
  ) {
    return _wallet_create_psbt(
      wallet,
      send_to,
      amount,
      fee_rate,
    );
  }

  late final _wallet_create_psbtPtr = _lookup<
      ffi.NativeFunction<
          Psbt Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, ffi.Uint64,
              ffi.Double)>>('wallet_create_psbt');
  late final _wallet_create_psbt = _wallet_create_psbtPtr.asFunction<
      Psbt Function(
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, int, double)>();

  Psbt wallet_decode_psbt(
    ffi.Pointer<ffi.Int> wallet,
    ffi.Pointer<ffi.Char> psbt,
  ) {
    return _wallet_decode_psbt(
      wallet,
      psbt,
    );
  }

  late final _wallet_decode_psbtPtr = _lookup<
      ffi.NativeFunction<
          Psbt Function(ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Char>)>>('wallet_decode_psbt');
  late final _wallet_decode_psbt = _wallet_decode_psbtPtr
      .asFunction<Psbt Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> wallet_broadcast_tx(
    ffi.Pointer<ffi.Char> electrum_address,
    int tor_port,
    ffi.Pointer<ffi.Char> tx,
  ) {
    return _wallet_broadcast_tx(
      electrum_address,
      tor_port,
      tx,
    );
  }

  late final _wallet_broadcast_txPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, ffi.Int32,
              ffi.Pointer<ffi.Char>)>>('wallet_broadcast_tx');
  late final _wallet_broadcast_tx = _wallet_broadcast_txPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  bool wallet_validate_address(
    ffi.Pointer<ffi.Int> wallet,
    ffi.Pointer<ffi.Char> address,
  ) {
    return _wallet_validate_address(
      wallet,
      address,
    );
  }

  late final _wallet_validate_addressPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Char>)>>('wallet_validate_address');
  late final _wallet_validate_address = _wallet_validate_addressPtr
      .asFunction<bool Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>)>();

  Psbt wallet_sign_offline(
    ffi.Pointer<ffi.Char> psbt,
    ffi.Pointer<ffi.Char> external_descriptor,
    ffi.Pointer<ffi.Char> internal_descriptor,
    int network,
  ) {
    return _wallet_sign_offline(
      psbt,
      external_descriptor,
      internal_descriptor,
      network,
    );
  }

  late final _wallet_sign_offlinePtr = _lookup<
      ffi.NativeFunction<
          Psbt Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int32)>>('wallet_sign_offline');
  late final _wallet_sign_offline = _wallet_sign_offlinePtr.asFunction<
      Psbt Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, int)>();

  Psbt wallet_sign_psbt(
    ffi.Pointer<ffi.Int> wallet,
    ffi.Pointer<ffi.Char> psbt,
  ) {
    return _wallet_sign_psbt(
      wallet,
      psbt,
    );
  }

  late final _wallet_sign_psbtPtr = _lookup<
      ffi.NativeFunction<
          Psbt Function(ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Char>)>>('wallet_sign_psbt');
  late final _wallet_sign_psbt = _wallet_sign_psbtPtr
      .asFunction<Psbt Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>)>();

  Seed wallet_generate_seed(
    int network,
  ) {
    return _wallet_generate_seed(
      network,
    );
  }

  late final _wallet_generate_seedPtr =
      _lookup<ffi.NativeFunction<Seed Function(ffi.Int32)>>(
          'wallet_generate_seed');
  late final _wallet_generate_seed =
      _wallet_generate_seedPtr.asFunction<Seed Function(int)>();

  ffi.Pointer<ffi.Char> wallet_get_xpub_desc_key(
    ffi.Pointer<ffi.Char> xprv,
    ffi.Pointer<ffi.Char> path,
  ) {
    return _wallet_get_xpub_desc_key(
      xprv,
      path,
    );
  }

  late final _wallet_get_xpub_desc_keyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('wallet_get_xpub_desc_key');
  late final _wallet_get_xpub_desc_key =
      _wallet_get_xpub_desc_keyPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> wallet_generate_xkey_with_entropy(
    ffi.Pointer<ffi.Uint8> entropy,
  ) {
    return _wallet_generate_xkey_with_entropy(
      entropy,
    );
  }

  late final _wallet_generate_xkey_with_entropyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Uint8>)>>('wallet_generate_xkey_with_entropy');
  late final _wallet_generate_xkey_with_entropy =
      _wallet_generate_xkey_with_entropyPtr
          .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Uint8>)>();

  Seed wallet_get_seed_from_entropy(
    int network,
    ffi.Pointer<ffi.Uint8> entropy,
  ) {
    return _wallet_get_seed_from_entropy(
      network,
      entropy,
    );
  }

  late final _wallet_get_seed_from_entropyPtr = _lookup<
          ffi.NativeFunction<Seed Function(ffi.Int32, ffi.Pointer<ffi.Uint8>)>>(
      'wallet_get_seed_from_entropy');
  late final _wallet_get_seed_from_entropy = _wallet_get_seed_from_entropyPtr
      .asFunction<Seed Function(int, ffi.Pointer<ffi.Uint8>)>();

  void wallet_hello() {
    return _wallet_hello();
  }

  late final _wallet_helloPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('wallet_hello');
  late final _wallet_hello = _wallet_helloPtr.asFunction<void Function()>();
}

abstract class NetworkType {
  static const int Mainnet = 0;
  static const int Testnet = 1;
  static const int Signet = 2;
  static const int Regtest = 3;
}

class ServerFeatures extends ffi.Struct {
  external ffi.Pointer<ffi.Char> server_version;

  external ffi.Pointer<ffi.Char> protocol_min;

  external ffi.Pointer<ffi.Char> protocol_max;

  @ffi.Int64()
  external int pruning;

  external ffi.Pointer<ffi.Uint8> genesis_hash;
}

class Transaction extends ffi.Struct {
  external ffi.Pointer<ffi.Char> txid;

  @ffi.Uint64()
  external int received;

  @ffi.Uint64()
  external int sent;

  @ffi.Uint64()
  external int fee;

  @ffi.Uint32()
  external int confirmation_height;

  @ffi.Uint64()
  external int confirmation_time;
}

class TransactionList extends ffi.Struct {
  @ffi.Uint32()
  external int transactions_len;

  external ffi.Pointer<Transaction> transactions;
}

class Psbt extends ffi.Struct {
  @ffi.Uint64()
  external int sent;

  @ffi.Uint64()
  external int received;

  @ffi.Uint64()
  external int fee;

  external ffi.Pointer<ffi.Char> base64;

  external ffi.Pointer<ffi.Char> txid;

  external ffi.Pointer<ffi.Char> raw_tx;
}

class Seed extends ffi.Struct {
  external ffi.Pointer<ffi.Char> mnemonic;

  external ffi.Pointer<ffi.Char> xprv;

  external ffi.Pointer<ffi.Char> fingerprint;
}

const int __GNUC_VA_LIST = 1;

const int __bool_true_false_are_defined = 1;

const int _STDINT_H = 1;

const int _FEATURES_H = 1;

const int _ISOC95_SOURCE = 1;

const int _ISOC99_SOURCE = 1;

const int _ISOC11_SOURCE = 1;

const int _ISOC2X_SOURCE = 1;

const int _POSIX_SOURCE = 1;

const int _POSIX_C_SOURCE = 200809;

const int _XOPEN_SOURCE = 700;

const int _XOPEN_SOURCE_EXTENDED = 1;

const int _LARGEFILE64_SOURCE = 1;

const int _DEFAULT_SOURCE = 1;

const int _ATFILE_SOURCE = 1;

const int _DYNAMIC_STACK_SIZE_SOURCE = 1;

const int __GLIBC_USE_ISOC2X = 1;

const int __USE_ISOC11 = 1;

const int __USE_ISOC99 = 1;

const int __USE_ISOC95 = 1;

const int __USE_ISOCXX11 = 1;

const int __USE_POSIX = 1;

const int __USE_POSIX2 = 1;

const int __USE_POSIX199309 = 1;

const int __USE_POSIX199506 = 1;

const int __USE_XOPEN2K = 1;

const int __USE_XOPEN2K8 = 1;

const int __USE_XOPEN = 1;

const int __USE_XOPEN_EXTENDED = 1;

const int __USE_UNIX98 = 1;

const int _LARGEFILE_SOURCE = 1;

const int __USE_XOPEN2K8XSI = 1;

const int __USE_XOPEN2KXSI = 1;

const int __USE_LARGEFILE = 1;

const int __USE_LARGEFILE64 = 1;

const int __WORDSIZE = 64;

const int __WORDSIZE_TIME64_COMPAT32 = 1;

const int __SYSCALL_WORDSIZE = 64;

const int __TIMESIZE = 64;

const int __USE_MISC = 1;

const int __USE_ATFILE = 1;

const int __USE_DYNAMIC_STACK_SIZE = 1;

const int __USE_GNU = 1;

const int __USE_FORTIFY_LEVEL = 0;

const int __GLIBC_USE_DEPRECATED_GETS = 0;

const int __GLIBC_USE_DEPRECATED_SCANF = 0;

const int _STDC_PREDEF_H = 1;

const int __STDC_IEC_559__ = 1;

const int __STDC_IEC_60559_BFP__ = 201404;

const int __STDC_IEC_559_COMPLEX__ = 1;

const int __STDC_IEC_60559_COMPLEX__ = 201404;

const int __STDC_ISO_10646__ = 201706;

const int __GNU_LIBRARY__ = 6;

const int __GLIBC__ = 2;

const int __GLIBC_MINOR__ = 36;

const int _SYS_CDEFS_H = 1;

const int __THROW = 1;

const int __THROWNL = 1;

const int __glibc_c99_flexarr_available = 1;

const int __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI = 0;

const int __HAVE_GENERIC_SELECTION = 0;

const int __GLIBC_USE_LIB_EXT2 = 1;

const int __GLIBC_USE_IEC_60559_BFP_EXT = 1;

const int __GLIBC_USE_IEC_60559_BFP_EXT_C2X = 1;

const int __GLIBC_USE_IEC_60559_EXT = 1;

const int __GLIBC_USE_IEC_60559_FUNCS_EXT = 1;

const int __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X = 1;

const int __GLIBC_USE_IEC_60559_TYPES_EXT = 1;

const int _BITS_TYPES_H = 1;

const int _BITS_TYPESIZES_H = 1;

const int __OFF_T_MATCHES_OFF64_T = 1;

const int __INO_T_MATCHES_INO64_T = 1;

const int __RLIM_T_MATCHES_RLIM64_T = 1;

const int __STATFS_MATCHES_STATFS64 = 1;

const int __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64 = 1;

const int __FD_SETSIZE = 1024;

const int _BITS_TIME64_H = 1;

const int _BITS_WCHAR_H = 1;

const int __WCHAR_MAX = 2147483647;

const int __WCHAR_MIN = -2147483648;

const int _BITS_STDINT_INTN_H = 1;

const int _BITS_STDINT_UINTN_H = 1;

const int INT8_MIN = -128;

const int INT16_MIN = -32768;

const int INT32_MIN = -2147483648;

const int INT64_MIN = -9223372036854775808;

const int INT8_MAX = 127;

const int INT16_MAX = 32767;

const int INT32_MAX = 2147483647;

const int INT64_MAX = 9223372036854775807;

const int UINT8_MAX = 255;

const int UINT16_MAX = 65535;

const int UINT32_MAX = 4294967295;

const int UINT64_MAX = -1;

const int INT_LEAST8_MIN = -128;

const int INT_LEAST16_MIN = -32768;

const int INT_LEAST32_MIN = -2147483648;

const int INT_LEAST64_MIN = -9223372036854775808;

const int INT_LEAST8_MAX = 127;

const int INT_LEAST16_MAX = 32767;

const int INT_LEAST32_MAX = 2147483647;

const int INT_LEAST64_MAX = 9223372036854775807;

const int UINT_LEAST8_MAX = 255;

const int UINT_LEAST16_MAX = 65535;

const int UINT_LEAST32_MAX = 4294967295;

const int UINT_LEAST64_MAX = -1;

const int INT_FAST8_MIN = -128;

const int INT_FAST16_MIN = -9223372036854775808;

const int INT_FAST32_MIN = -9223372036854775808;

const int INT_FAST64_MIN = -9223372036854775808;

const int INT_FAST8_MAX = 127;

const int INT_FAST16_MAX = 9223372036854775807;

const int INT_FAST32_MAX = 9223372036854775807;

const int INT_FAST64_MAX = 9223372036854775807;

const int UINT_FAST8_MAX = 255;

const int UINT_FAST16_MAX = -1;

const int UINT_FAST32_MAX = -1;

const int UINT_FAST64_MAX = -1;

const int INTPTR_MIN = -9223372036854775808;

const int INTPTR_MAX = 9223372036854775807;

const int UINTPTR_MAX = -1;

const int INTMAX_MIN = -9223372036854775808;

const int INTMAX_MAX = 9223372036854775807;

const int UINTMAX_MAX = -1;

const int PTRDIFF_MIN = -9223372036854775808;

const int PTRDIFF_MAX = 9223372036854775807;

const int SIG_ATOMIC_MIN = -2147483648;

const int SIG_ATOMIC_MAX = 2147483647;

const int SIZE_MAX = -1;

const int WCHAR_MIN = -2147483648;

const int WCHAR_MAX = 2147483647;

const int WINT_MIN = 0;

const int WINT_MAX = 4294967295;

const int INT8_WIDTH = 8;

const int UINT8_WIDTH = 8;

const int INT16_WIDTH = 16;

const int UINT16_WIDTH = 16;

const int INT32_WIDTH = 32;

const int UINT32_WIDTH = 32;

const int INT64_WIDTH = 64;

const int UINT64_WIDTH = 64;

const int INT_LEAST8_WIDTH = 8;

const int UINT_LEAST8_WIDTH = 8;

const int INT_LEAST16_WIDTH = 16;

const int UINT_LEAST16_WIDTH = 16;

const int INT_LEAST32_WIDTH = 32;

const int UINT_LEAST32_WIDTH = 32;

const int INT_LEAST64_WIDTH = 64;

const int UINT_LEAST64_WIDTH = 64;

const int INT_FAST8_WIDTH = 8;

const int UINT_FAST8_WIDTH = 8;

const int INT_FAST16_WIDTH = 64;

const int UINT_FAST16_WIDTH = 64;

const int INT_FAST32_WIDTH = 64;

const int UINT_FAST32_WIDTH = 64;

const int INT_FAST64_WIDTH = 64;

const int UINT_FAST64_WIDTH = 64;

const int INTPTR_WIDTH = 64;

const int UINTPTR_WIDTH = 64;

const int INTMAX_WIDTH = 64;

const int UINTMAX_WIDTH = 64;

const int PTRDIFF_WIDTH = 64;

const int SIG_ATOMIC_WIDTH = 32;

const int SIZE_WIDTH = 64;

const int WCHAR_WIDTH = 32;

const int WINT_WIDTH = 32;

const int _GLIBCXX_STDLIB_H = 1;

const int _GLIBCXX_CXX_CONFIG_H = 1;

const int _GLIBCXX_RELEASE = 12;

const int __GLIBCXX__ = 20220819;

const int _GLIBCXX_HAVE_ATTRIBUTE_VISIBILITY = 1;

const int _GLIBCXX_USE_DEPRECATED = 1;

const int _GLIBCXX_EXTERN_TEMPLATE = 1;

const int _GLIBCXX_USE_DUAL_ABI = 1;

const int _GLIBCXX_USE_CXX11_ABI = 1;

const int _GLIBCXX_INLINE_VERSION = 0;

const int _GLIBCXX_HAVE_IS_CONSTANT_EVALUATED = 1;

const int _GLIBCXX_VERBOSE_ASSERT = 1;

const int _GLIBCXX_USE_ALLOCATOR_NEW = 1;

const int _GLIBCXX_OS_DEFINES = 1;

const int __NO_CTYPE = 1;

const int _GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC = 1;

const int _GLIBCXX_GTHREAD_USE_WEAK = 0;

const int _GLIBCXX_CPU_DEFINES = 1;

const int _GLIBCXX_USE_WEAK_REF = 1;

const int _GLIBCXX_FAST_MATH = 0;

const int _GLIBCXX_USE_C99_MATH = 1;

const int _GLIBCXX_USE_C99_COMPLEX = 1;

const int _GLIBCXX_USE_C99_STDIO = 1;

const int _GLIBCXX_USE_C99_STDLIB = 1;

const int _GLIBCXX_USE_C99_WCHAR = 1;

const int _GLIBCXX_USE_FLOAT128 = 1;

const int _GLIBCXX_FLOAT_IS_IEEE_BINARY32 = 1;

const int _GLIBCXX_DOUBLE_IS_IEEE_BINARY64 = 1;

const int _GLIBCXX_HAVE_BUILTIN_HAS_UNIQ_OBJ_REP = 1;

const int _GLIBCXX_HAVE_BUILTIN_IS_AGGREGATE = 1;

const int _GLIBCXX_HAVE_BUILTIN_IS_SAME = 1;

const int _GLIBCXX_HAVE_BUILTIN_LAUNDER = 1;

const int _GLIBCXX_HAVE_ACOSF = 1;

const int _GLIBCXX_HAVE_ACOSL = 1;

const int _GLIBCXX_HAVE_ALIGNED_ALLOC = 1;

const int _GLIBCXX_HAVE_ARC4RANDOM = 1;

const int _GLIBCXX_HAVE_ARPA_INET_H = 1;

const int _GLIBCXX_HAVE_ASINF = 1;

const int _GLIBCXX_HAVE_ASINL = 1;

const int _GLIBCXX_HAVE_AS_SYMVER_DIRECTIVE = 1;

const int _GLIBCXX_HAVE_ATAN2F = 1;

const int _GLIBCXX_HAVE_ATAN2L = 1;

const int _GLIBCXX_HAVE_ATANF = 1;

const int _GLIBCXX_HAVE_ATANL = 1;

const int _GLIBCXX_HAVE_ATOMIC_LOCK_POLICY = 1;

const int _GLIBCXX_HAVE_AT_QUICK_EXIT = 1;

const int _GLIBCXX_HAVE_CEILF = 1;

const int _GLIBCXX_HAVE_CEILL = 1;

const int _GLIBCXX_HAVE_COMPLEX_H = 1;

const int _GLIBCXX_HAVE_COSF = 1;

const int _GLIBCXX_HAVE_COSHF = 1;

const int _GLIBCXX_HAVE_COSHL = 1;

const int _GLIBCXX_HAVE_COSL = 1;

const int _GLIBCXX_HAVE_DECL_STRNLEN = 1;

const int _GLIBCXX_HAVE_DIRENT_H = 1;

const int _GLIBCXX_HAVE_DIRFD = 1;

const int _GLIBCXX_HAVE_DLFCN_H = 1;

const int _GLIBCXX_HAVE_ENDIAN_H = 1;

const int _GLIBCXX_HAVE_EXCEPTION_PTR_SINCE_GCC46 = 1;

const int _GLIBCXX_HAVE_EXECINFO_H = 1;

const int _GLIBCXX_HAVE_EXPF = 1;

const int _GLIBCXX_HAVE_EXPL = 1;

const int _GLIBCXX_HAVE_FABSF = 1;

const int _GLIBCXX_HAVE_FABSL = 1;

const int _GLIBCXX_HAVE_FCNTL_H = 1;

const int _GLIBCXX_HAVE_FDOPENDIR = 1;

const int _GLIBCXX_HAVE_FENV_H = 1;

const int _GLIBCXX_HAVE_FINITE = 1;

const int _GLIBCXX_HAVE_FINITEF = 1;

const int _GLIBCXX_HAVE_FINITEL = 1;

const int _GLIBCXX_HAVE_FLOAT_H = 1;

const int _GLIBCXX_HAVE_FLOORF = 1;

const int _GLIBCXX_HAVE_FLOORL = 1;

const int _GLIBCXX_HAVE_FMODF = 1;

const int _GLIBCXX_HAVE_FMODL = 1;

const int _GLIBCXX_HAVE_FREXPF = 1;

const int _GLIBCXX_HAVE_FREXPL = 1;

const int _GLIBCXX_HAVE_GETENTROPY = 1;

const int _GLIBCXX_HAVE_GETIPINFO = 1;

const int _GLIBCXX_HAVE_GETS = 1;

const int _GLIBCXX_HAVE_HYPOT = 1;

const int _GLIBCXX_HAVE_HYPOTF = 1;

const int _GLIBCXX_HAVE_HYPOTL = 1;

const int _GLIBCXX_HAVE_ICONV = 1;

const int _GLIBCXX_HAVE_INTTYPES_H = 1;

const int _GLIBCXX_HAVE_ISINFF = 1;

const int _GLIBCXX_HAVE_ISINFL = 1;

const int _GLIBCXX_HAVE_ISNANF = 1;

const int _GLIBCXX_HAVE_ISNANL = 1;

const int _GLIBCXX_HAVE_ISWBLANK = 1;

const int _GLIBCXX_HAVE_LC_MESSAGES = 1;

const int _GLIBCXX_HAVE_LDEXPF = 1;

const int _GLIBCXX_HAVE_LDEXPL = 1;

const int _GLIBCXX_HAVE_LIBINTL_H = 1;

const int _GLIBCXX_HAVE_LIMIT_AS = 1;

const int _GLIBCXX_HAVE_LIMIT_DATA = 1;

const int _GLIBCXX_HAVE_LIMIT_FSIZE = 1;

const int _GLIBCXX_HAVE_LIMIT_RSS = 1;

const int _GLIBCXX_HAVE_LIMIT_VMEM = 0;

const int _GLIBCXX_HAVE_LINK = 1;

const int _GLIBCXX_HAVE_LINK_H = 1;

const int _GLIBCXX_HAVE_LINUX_FUTEX = 1;

const int _GLIBCXX_HAVE_LINUX_RANDOM_H = 1;

const int _GLIBCXX_HAVE_LINUX_TYPES_H = 1;

const int _GLIBCXX_HAVE_LOCALE_H = 1;

const int _GLIBCXX_HAVE_LOG10F = 1;

const int _GLIBCXX_HAVE_LOG10L = 1;

const int _GLIBCXX_HAVE_LOGF = 1;

const int _GLIBCXX_HAVE_LOGL = 1;

const int _GLIBCXX_HAVE_MBSTATE_T = 1;

const int _GLIBCXX_HAVE_MEMALIGN = 1;

const int _GLIBCXX_HAVE_MEMORY_H = 1;

const int _GLIBCXX_HAVE_MODF = 1;

const int _GLIBCXX_HAVE_MODFF = 1;

const int _GLIBCXX_HAVE_MODFL = 1;

const int _GLIBCXX_HAVE_NETDB_H = 1;

const int _GLIBCXX_HAVE_NETINET_IN_H = 1;

const int _GLIBCXX_HAVE_NETINET_TCP_H = 1;

const int _GLIBCXX_HAVE_OPENAT = 1;

const int _GLIBCXX_HAVE_POLL = 1;

const int _GLIBCXX_HAVE_POLL_H = 1;

const int _GLIBCXX_HAVE_POSIX_MEMALIGN = 1;

const int _GLIBCXX_HAVE_POSIX_SEMAPHORE = 1;

const int _GLIBCXX_HAVE_POWF = 1;

const int _GLIBCXX_HAVE_POWL = 1;

const int _GLIBCXX_HAVE_QUICK_EXIT = 1;

const int _GLIBCXX_HAVE_READLINK = 1;

const int _GLIBCXX_HAVE_SECURE_GETENV = 1;

const int _GLIBCXX_HAVE_SETENV = 1;

const int _GLIBCXX_HAVE_SINCOS = 1;

const int _GLIBCXX_HAVE_SINCOSF = 1;

const int _GLIBCXX_HAVE_SINCOSL = 1;

const int _GLIBCXX_HAVE_SINF = 1;

const int _GLIBCXX_HAVE_SINHF = 1;

const int _GLIBCXX_HAVE_SINHL = 1;

const int _GLIBCXX_HAVE_SINL = 1;

const int _GLIBCXX_HAVE_SOCKATMARK = 1;

const int _GLIBCXX_HAVE_SQRTF = 1;

const int _GLIBCXX_HAVE_SQRTL = 1;

const int _GLIBCXX_HAVE_STDALIGN_H = 1;

const int _GLIBCXX_HAVE_STDBOOL_H = 1;

const int _GLIBCXX_HAVE_STDINT_H = 1;

const int _GLIBCXX_HAVE_STDLIB_H = 1;

const int _GLIBCXX_HAVE_STRERROR_L = 1;

const int _GLIBCXX_HAVE_STRERROR_R = 1;

const int _GLIBCXX_HAVE_STRINGS_H = 1;

const int _GLIBCXX_HAVE_STRING_H = 1;

const int _GLIBCXX_HAVE_STRTOF = 1;

const int _GLIBCXX_HAVE_STRTOLD = 1;

const int _GLIBCXX_HAVE_STRUCT_DIRENT_D_TYPE = 1;

const int _GLIBCXX_HAVE_STRXFRM_L = 1;

const int _GLIBCXX_HAVE_SYMLINK = 1;

const int _GLIBCXX_HAVE_SYMVER_SYMBOL_RENAMING_RUNTIME_SUPPORT = 1;

const int _GLIBCXX_HAVE_SYS_IOCTL_H = 1;

const int _GLIBCXX_HAVE_SYS_IPC_H = 1;

const int _GLIBCXX_HAVE_SYS_PARAM_H = 1;

const int _GLIBCXX_HAVE_SYS_RESOURCE_H = 1;

const int _GLIBCXX_HAVE_SYS_SDT_H = 1;

const int _GLIBCXX_HAVE_SYS_SEM_H = 1;

const int _GLIBCXX_HAVE_SYS_SOCKET_H = 1;

const int _GLIBCXX_HAVE_SYS_STATVFS_H = 1;

const int _GLIBCXX_HAVE_SYS_STAT_H = 1;

const int _GLIBCXX_HAVE_SYS_SYSINFO_H = 1;

const int _GLIBCXX_HAVE_SYS_TIME_H = 1;

const int _GLIBCXX_HAVE_SYS_TYPES_H = 1;

const int _GLIBCXX_HAVE_SYS_UIO_H = 1;

const int _GLIBCXX_HAVE_S_ISREG = 1;

const int _GLIBCXX_HAVE_TANF = 1;

const int _GLIBCXX_HAVE_TANHF = 1;

const int _GLIBCXX_HAVE_TANHL = 1;

const int _GLIBCXX_HAVE_TANL = 1;

const int _GLIBCXX_HAVE_TGMATH_H = 1;

const int _GLIBCXX_HAVE_TIMESPEC_GET = 1;

const int _GLIBCXX_HAVE_TLS = 1;

const int _GLIBCXX_HAVE_TRUNCATE = 1;

const int _GLIBCXX_HAVE_UCHAR_H = 1;

const int _GLIBCXX_HAVE_UNISTD_H = 1;

const int _GLIBCXX_HAVE_UNLINKAT = 1;

const int _GLIBCXX_HAVE_USELOCALE = 1;

const int _GLIBCXX_HAVE_UTIME_H = 1;

const int _GLIBCXX_HAVE_VFWSCANF = 1;

const int _GLIBCXX_HAVE_VSWSCANF = 1;

const int _GLIBCXX_HAVE_VWSCANF = 1;

const int _GLIBCXX_HAVE_WCHAR_H = 1;

const int _GLIBCXX_HAVE_WCSTOF = 1;

const int _GLIBCXX_HAVE_WCTYPE_H = 1;

const int _GLIBCXX_HAVE_WRITEV = 1;

const int _GLIBCXX_HAVE___CXA_THREAD_ATEXIT_IMPL = 1;

const String _GLIBCXX_LT_OBJDIR = '.libs/';

const String _GLIBCXX_PACKAGE_BUGREPORT = '';

const String _GLIBCXX_PACKAGE_NAME = 'package-unused';

const String _GLIBCXX_PACKAGE_STRING = 'package-unused version-unused';

const String _GLIBCXX_PACKAGE_TARNAME = 'libstdc++';

const String _GLIBCXX_PACKAGE_URL = '';

const String _GLIBCXX_PACKAGE__GLIBCXX_VERSION = 'version-unused';

const int _GLIBCXX_STDC_HEADERS = 1;

const int _GLIBCXX_DARWIN_USE_64_BIT_INODE = 1;

const int _GLIBCXX11_USE_C99_COMPLEX = 1;

const int _GLIBCXX11_USE_C99_MATH = 1;

const int _GLIBCXX11_USE_C99_STDIO = 1;

const int _GLIBCXX11_USE_C99_STDLIB = 1;

const int _GLIBCXX11_USE_C99_WCHAR = 1;

const int _GLIBCXX98_USE_C99_COMPLEX = 1;

const int _GLIBCXX98_USE_C99_MATH = 1;

const int _GLIBCXX98_USE_C99_STDIO = 1;

const int _GLIBCXX98_USE_C99_STDLIB = 1;

const int _GLIBCXX98_USE_C99_WCHAR = 1;

const int _GLIBCXX_ATOMIC_BUILTINS = 1;

const int _GLIBCXX_FULLY_DYNAMIC_STRING = 0;

const int _GLIBCXX_HAS_GTHREADS = 1;

const int _GLIBCXX_HOSTED = 1;

const int _GLIBCXX_RES_LIMITS = 1;

const int _GLIBCXX_STDIO_EOF = -1;

const int _GLIBCXX_STDIO_SEEK_CUR = 1;

const int _GLIBCXX_STDIO_SEEK_END = 2;

const int _GLIBCXX_SYMVER = 1;

const int _GLIBCXX_SYMVER_GNU = 1;

const int _GLIBCXX_USE_C11_UCHAR_CXX11 = 1;

const int _GLIBCXX_USE_C99 = 1;

const int _GLIBCXX_USE_C99_COMPLEX_TR1 = 1;

const int _GLIBCXX_USE_C99_CTYPE_TR1 = 1;

const int _GLIBCXX_USE_C99_FENV_TR1 = 1;

const int _GLIBCXX_USE_C99_INTTYPES_TR1 = 1;

const int _GLIBCXX_USE_C99_INTTYPES_WCHAR_T_TR1 = 1;

const int _GLIBCXX_USE_C99_MATH_TR1 = 1;

const int _GLIBCXX_USE_C99_STDINT_TR1 = 1;

const int _GLIBCXX_USE_CLOCK_MONOTONIC = 1;

const int _GLIBCXX_USE_CLOCK_REALTIME = 1;

const int _GLIBCXX_USE_DECIMAL_FLOAT = 1;

const int _GLIBCXX_USE_DEV_RANDOM = 1;

const int _GLIBCXX_USE_FCHMOD = 1;

const int _GLIBCXX_USE_FCHMODAT = 1;

const int _GLIBCXX_USE_GETTIMEOFDAY = 1;

const int _GLIBCXX_USE_GET_NPROCS = 1;

const int _GLIBCXX_USE_LFS = 1;

const int _GLIBCXX_USE_LONG_LONG = 1;

const int _GLIBCXX_USE_LSTAT = 1;

const int _GLIBCXX_USE_NANOSLEEP = 1;

const int _GLIBCXX_USE_NLS = 1;

const int _GLIBCXX_USE_PTHREAD_COND_CLOCKWAIT = 1;

const int _GLIBCXX_USE_PTHREAD_MUTEX_CLOCKLOCK = 1;

const int _GLIBCXX_USE_PTHREAD_RWLOCK_CLOCKLOCK = 1;

const int _GLIBCXX_USE_PTHREAD_RWLOCK_T = 1;

const int _GLIBCXX_USE_RANDOM_TR1 = 1;

const int _GLIBCXX_USE_REALPATH = 1;

const int _GLIBCXX_USE_SCHED_YIELD = 1;

const int _GLIBCXX_USE_SC_NPROCESSORS_ONLN = 1;

const int _GLIBCXX_USE_SENDFILE = 1;

const int _GLIBCXX_USE_ST_MTIM = 1;

const int _GLIBCXX_USE_TMPNAM = 1;

const int _GLIBCXX_USE_UCHAR_C8RTOMB_MBRTOC8_CXX20 = 1;

const int _GLIBCXX_USE_UCHAR_C8RTOMB_MBRTOC8_FCHAR8_T = 1;

const int _GLIBCXX_USE_UTIME = 1;

const int _GLIBCXX_USE_UTIMENSAT = 1;

const int _GLIBCXX_USE_WCHAR_T = 1;

const int _GLIBCXX_VERBOSE = 1;

const int _GLIBCXX_X86_RDRAND = 1;

const int _GLIBCXX_X86_RDSEED = 1;

const int _GTHREAD_USE_MUTEX_TIMEDLOCK = 1;

const int _GLIBCXX_CSTDLIB = 1;

const int NULL = 0;

const int _STDLIB_H = 1;

const int WNOHANG = 1;

const int WUNTRACED = 2;

const int WSTOPPED = 2;

const int WEXITED = 4;

const int WCONTINUED = 8;

const int WNOWAIT = 16777216;

const int __WNOTHREAD = 536870912;

const int __WALL = 1073741824;

const int __WCLONE = 2147483648;

const int __W_CONTINUED = 65535;

const int __WCOREFLAG = 128;

const int __HAVE_FLOAT128 = 0;

const int __HAVE_DISTINCT_FLOAT128 = 0;

const int __HAVE_FLOAT64X = 1;

const int __HAVE_FLOAT64X_LONG_DOUBLE = 1;

const int __HAVE_FLOAT16 = 0;

const int __HAVE_FLOAT32 = 1;

const int __HAVE_FLOAT64 = 1;

const int __HAVE_FLOAT32X = 1;

const int __HAVE_FLOAT128X = 0;

const int __HAVE_DISTINCT_FLOAT16 = 0;

const int __HAVE_DISTINCT_FLOAT32 = 0;

const int __HAVE_DISTINCT_FLOAT64 = 0;

const int __HAVE_DISTINCT_FLOAT32X = 0;

const int __HAVE_DISTINCT_FLOAT64X = 0;

const int __HAVE_DISTINCT_FLOAT128X = 0;

const int __HAVE_FLOAT128_UNLIKE_LDBL = 0;

const int __HAVE_FLOATN_NOT_TYPEDEF = 0;

const int __ldiv_t_defined = 1;

const int __lldiv_t_defined = 1;

const int RAND_MAX = 2147483647;

const int EXIT_FAILURE = 1;

const int EXIT_SUCCESS = 0;

const int _BITS_TYPES_LOCALE_T_H = 1;

const int _BITS_TYPES___LOCALE_T_H = 1;

const int _SYS_TYPES_H = 1;

const int __clock_t_defined = 1;

const int __clockid_t_defined = 1;

const int __time_t_defined = 1;

const int __timer_t_defined = 1;

const int __BIT_TYPES_DEFINED__ = 1;

const int _ENDIAN_H = 1;

const int _BITS_ENDIAN_H = 1;

const int __LITTLE_ENDIAN = 1234;

const int __BIG_ENDIAN = 4321;

const int __PDP_ENDIAN = 3412;

const int _BITS_ENDIANNESS_H = 1;

const int __BYTE_ORDER = 1234;

const int __FLOAT_WORD_ORDER = 1234;

const int LITTLE_ENDIAN = 1234;

const int BIG_ENDIAN = 4321;

const int PDP_ENDIAN = 3412;

const int BYTE_ORDER = 1234;

const int _BITS_BYTESWAP_H = 1;

const int _BITS_UINTN_IDENTITY_H = 1;

const int _SYS_SELECT_H = 1;

const int __sigset_t_defined = 1;

const int _SIGSET_NWORDS = 16;

const int __timeval_defined = 1;

const int _STRUCT_TIMESPEC = 1;

const int __NFDBITS = 64;

const int FD_SETSIZE = 1024;

const int NFDBITS = 64;

const int _BITS_PTHREADTYPES_COMMON_H = 1;

const int _THREAD_SHARED_TYPES_H = 1;

const int _BITS_PTHREADTYPES_ARCH_H = 1;

const int __SIZEOF_PTHREAD_MUTEX_T = 40;

const int __SIZEOF_PTHREAD_ATTR_T = 56;

const int __SIZEOF_PTHREAD_RWLOCK_T = 56;

const int __SIZEOF_PTHREAD_BARRIER_T = 32;

const int __SIZEOF_PTHREAD_MUTEXATTR_T = 4;

const int __SIZEOF_PTHREAD_COND_T = 48;

const int __SIZEOF_PTHREAD_CONDATTR_T = 4;

const int __SIZEOF_PTHREAD_RWLOCKATTR_T = 8;

const int __SIZEOF_PTHREAD_BARRIERATTR_T = 4;

const int _THREAD_MUTEX_INTERNAL_H = 1;

const int __PTHREAD_MUTEX_HAVE_PREV = 1;

const int __PTHREAD_RWLOCK_ELISION_EXTRA = 0;

const int __have_pthread_attr_t = 1;

const int _ALLOCA_H = 1;
